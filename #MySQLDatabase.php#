<?php
  /**
   *  @package    mysql-database
   */

  /**
   *  MySQL Database
   *
   *  A singleton object which provides convenience methods for interfacing with
   *  a MySQL database in PHP 5. You can get the object's instance using the 
   *  static {@link getInstance()} method. Being a singleton object, this class
   *  only supports one open database connection at a time and idealy suited to
   *  single-threaded applications. You can read 
   *  about {@link http://php.net/manual/en/language.oop5.patterns.php the singleton 
   *  pattern in the PHP manual}.
   *  
   *  <b>Getting Started</b>
   *  <code>
   *  $db = MySqlDatabase::getInstance();
   *  
   *  try {
   *      $db->connect('localhost', 'user', 'password', 'database_name');
   *  } 
   *  catch (Exception $e) {
   *      die($e->getMessage());
   *  }
   *  </code>
   *
   *  @package    mysql-database
   *  @author     Micah Carrick
   *  @copyright  (c) 2010 - Micah Carrick
   *  @version    2.0
   *  @license BSD
   */
class MySqlDatabase
{
  /**
   *  The MySQL link identifier created by {@link connect()}
   *
   *  @var resource
   */
  public $link;
    
  /**
   *  @var string
   */
  private $conn_str;
    
  /**
   *  @var MySqlDatabase
   */
  private static $instance;
    
  const MYSQL_DATE_FORMAT = 'Y-m-d';
  const MYSQL_TIME_FORMAT = 'H:i:s';
  const MYSQL_DATETIME_FORMAT = 'Y-m-d H:i:s';
    
  const INSERT_GET_AUTO_INCREMENT_ID = 1;
  const INSERT_GET_AFFECTED_ROWS = 2;
    
  /**
   *  Constructor
   *
   *  Private constructor as part of the singleton pattern implementation.
   */
  private function __construct() {}

  /**
   *  Connect
   *
   *  Establish a connection to a MySQL database. Returns the MySQL link 
   *  link identifier or throws an exception if there is an error.
   *
   *  <code>
   *  // get an instance of the Database singleton
   *  $db = MySqlDatabase::getInstance();
   *
   *  // connect to a MySQL database (use your own login information)
   *  try {
   *      $db->connect('localhost', 'user', 'password', 'database_name');
   *  } 
   *  catch (Exception $e) {
   *      die($e->getMessage());
   *  }
   *  </code>
   *
   *  @param  string
   *  @param  string
   *  @param  string
   *  @param  string
   *  @param  boolean
   *  @return resource
   */
  public function connect($host, $user, $password, $database=false, $persistant=false)
  {
    if ($persistant) {
      $this->link = @mysql_pconnect($host, $user, $password);
    } else {
      $this->link = @mysql_connect($host, $user, $password);
    }
        
    if (!$this->link) 
      {
	throw new Exception('Unable to establish database connection: ' 
			    .mysql_error());
      }

    if ($database) $this->useDatabase($database);
        
    $version = mysql_get_server_info();
    $this->conn_str = "'$database' on '$user@$host' (MySQL $version)";
        
    return $this->link;
  }
    
  /**
   *  Delete
   *
   *  Executes the DELETE statement specified in the query and returns the
   *  value from either the PHP {@link mysql_affected_rows()} function. Throws
   *  and exception if there is a MySQL error in the query.
   *
   *  Note: With MySQL versions prior to 4.1.2, the affected rows on DELETE
   *  statements with no WHERE clause is 0. See {@link mysql_affected_rows()}
   *  for more information.
   *
   *  @param  string
   *  @return integer
   */
  public function delete($query) 
  {
    return $this->updateOrDelete($query);
  }
    
  /**
   *  Get Connection String
   *
   *  Gets a string representing the connection.
   *  
   *  <code>
   *  echo $db->getConnectionString();
   *  // example output: 'test_database' on 'web_user@localhost' (MySQL 5.1.47)
   *  </code>
   *
   *  @return string
   */
  public function getConnectionString() 
  {
    return $this->conn_str;
  }
    
  /**
   *  Get Instance
   *
   *  Gets the singleton instance for this object. This method should be called
   *  statically in order to use the Database object:
   *
   *  <code>
   *  $db = MySqlDatabase::getInstance();
   *  </code>
   *
   *  @return MySqlDatabase
   */
  public static function getInstance()
  {
    if (!isset(self::$instance))
      {
	self::$instance = new MySqlDatabase();
      }
        
    return self::$instance;
  }
    
  /**
   *  Fetch One From Each Row
   *  
   *  Convenience method to get a single value from every row in a given
      fetchOneFromEachRow($query)
    {
        $rval = array();
        
        foreach ($this->iterate($query, MySqlResultSet::DATA_N
  */
  public function fetchOneRow($query, $data_type=MySqlResultSetlse return $row[0];
			      }
    
    public function secure_string($string)
    {
      if(get_magic_quotes_gpc())
	$string = str
	  *      else echo "(FAIL)<br/>";    
      *  }
     *  </code>
	    able($callback)) {
  throw new Exception("Invalid callback function.");
  }

$lines = $this->loadFile($filename);
$in_comment = true;
}
                    
$line = substr($line, 0, $comment);
                    
} else {
                
    $file = basename($filename);
    $error = mysql_error($this->link);
    throw new Excee PHP {@link mysql_insert_id()} function or the
						    *  php {@link mysql_affected_rows()} function dnd an array of values and generate a
											   *  multiple record insert. You should not use this, but, you could help
     *  out and finish or rewrite this method.
											   *, $columns);
$column_count = count($columns);
} else {
    throw new Exception('The $columns parameter must be a string or an array of strings.');
  }
        
if (isset($column_count) && $column_count <> $value_count) {
  throw new Exception("Column count ($column_count) does not match values count ($value_count).");
}
        
$query .= "VALUES ($value_sql) ";

echo $query;
($sql_query, MySQL_Db::DATA_ARRAY) as $row) {
  *      echo $row[0] . '<br/>';
  *      echo $row['col1'] . '<br/>';
  *  }
     *  </code>
     *
     *  @param  string
     *  @param  integer
     *  @return boolean
     */
     public= @mysql_query($query, $this->link);

if (!$r) {
  throw new Exception("Query Error: " . mysql_error());
}
        
return $r;
}
    
/**
 *  Quick Query
 *  
 *  Executes a MySQL query and returns a boolean value exception if there is a MySQL error in the query.
 *
 *  Note: The number of rows affected include only those in which the new
 *  value was not the same as the old value. See {@link mysql_affected_rows()}
 *  for more information.
 *
 *  @param  string
 *  @return integer
 */
public function update($query) 
{
        return $this-